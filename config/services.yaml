# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\RickAndMortyApiService:
        arguments:
            $httpClient: '@http_client'

    App\Command\ImportRickAndMortyDataCommand:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
            $apiService: '@App\Service\RickAndMortyApiService'
            $characterRepository: '@App\Repository\CharacterRepository'
            $episodeRepository: '@App\Repository\EpisodeRepository'
            $reviewRepository: '@App\Repository\ReviewRepository'
            $serializer: '@serializer'
        tags: [ 'console.command' ]

    App\Strategy\RandomRatingStrategy:
        public: false
        tags: [ 'app.rating_strategy' ]

    App\Strategy\SentimentRatingStrategy:
        public: false
        tags: [ 'app.rating_strategy' ]

    App\Service\RatingCalculator:
        arguments:
            $defaultStrategy: '%env(RATING_CALCULATOR_STRATEGY)%'
        calls:
            -   method: addStrategy
                arguments:
                    $name: 'random'
                    $strategy: '@App\Strategy\RandomRatingStrategy'
            -   method: addStrategy
                arguments:
                    $name: 'sentiment'
                    $strategy: '@App\Strategy\SentimentRatingStrategy'

    App\Service\ReviewService:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
            $reviewRepository: '@App\Repository\ReviewRepository'
            $validator: '@validator'
            $ratingCalculator: '@App\Service\RatingCalculator'

    App\Command\CalculateRatingsCommand:
        arguments:
            $reviewService: '@App\Service\ReviewService'
            $ratingCalculator: '@App\Service\RatingCalculator'
            $logger: '@logger'
        tags: [ 'console.command' ]

    App\EntityListener\ReviewListener:
        arguments:
            $ratingCalculator: '@App\Service\RatingCalculator'

    App\Service\DtoTransformer:
        arguments: [ ]



